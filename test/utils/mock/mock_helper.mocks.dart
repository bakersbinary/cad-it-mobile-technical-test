// Mocks generated by Mockito 5.4.4 from annotations
// in cad_it_mobile_technical_test/test/utils/mock/mock_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:convert' as _i14;
import 'dart:typed_data' as _i16;

import 'package:cad_it_mobile_technical_test/data/failure.dart' as _i9;
import 'package:cad_it_mobile_technical_test/data/model/forecast_daily_model.dart'
    as _i5;
import 'package:cad_it_mobile_technical_test/data/model/forecast_hourly_model.dart'
    as _i4;
import 'package:cad_it_mobile_technical_test/data/model/weather_%20model.dart'
    as _i3;
import 'package:cad_it_mobile_technical_test/data/source/remote/weather_remote_source.dart'
    as _i13;
import 'package:cad_it_mobile_technical_test/domain/entity/forecast_daily_entity.dart'
    as _i12;
import 'package:cad_it_mobile_technical_test/domain/entity/forecast_hourly_entity.dart'
    as _i11;
import 'package:cad_it_mobile_technical_test/domain/entity/weather_entity.dart'
    as _i10;
import 'package:cad_it_mobile_technical_test/domain/repository/weather_repository.dart'
    as _i7;
import 'package:dartz/dartz.dart' as _i2;
import 'package:http/http.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i15;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWeatherModel_1 extends _i1.SmartFake implements _i3.WeatherModel {
  _FakeWeatherModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHourlyTemperatures_2 extends _i1.SmartFake
    implements _i4.HourlyTemperatures {
  _FakeHourlyTemperatures_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDailyTemperatures_3 extends _i1.SmartFake
    implements _i5.DailyTemperatures {
  _FakeDailyTemperatures_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_4 extends _i1.SmartFake implements _i6.Response {
  _FakeResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_5 extends _i1.SmartFake
    implements _i6.StreamedResponse {
  _FakeStreamedResponse_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WeatherRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRepository extends _i1.Mock implements _i7.WeatherRepository {
  MockWeatherRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.Either<_i9.Failure, _i10.WeatherEntity>> getWeather() =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeather,
          [],
        ),
        returnValue:
            _i8.Future<_i2.Either<_i9.Failure, _i10.WeatherEntity>>.value(
                _FakeEither_0<_i9.Failure, _i10.WeatherEntity>(
          this,
          Invocation.method(
            #getWeather,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i9.Failure, _i10.WeatherEntity>>);

  @override
  _i8.Future<_i2.Either<_i9.Failure, List<_i11.ForecastHourlyEntity>>>
      getForecastHourly() => (super.noSuchMethod(
            Invocation.method(
              #getForecastHourly,
              [],
            ),
            returnValue: _i8.Future<
                    _i2.Either<_i9.Failure,
                        List<_i11.ForecastHourlyEntity>>>.value(
                _FakeEither_0<_i9.Failure, List<_i11.ForecastHourlyEntity>>(
              this,
              Invocation.method(
                #getForecastHourly,
                [],
              ),
            )),
          ) as _i8.Future<
              _i2.Either<_i9.Failure, List<_i11.ForecastHourlyEntity>>>);

  @override
  _i8.Future<_i2.Either<_i9.Failure, List<_i12.ForecastDailyEntity>>>
      getForecastDaily() => (super.noSuchMethod(
            Invocation.method(
              #getForecastDaily,
              [],
            ),
            returnValue: _i8.Future<
                    _i2
                    .Either<_i9.Failure, List<_i12.ForecastDailyEntity>>>.value(
                _FakeEither_0<_i9.Failure, List<_i12.ForecastDailyEntity>>(
              this,
              Invocation.method(
                #getForecastDaily,
                [],
              ),
            )),
          ) as _i8
              .Future<_i2.Either<_i9.Failure, List<_i12.ForecastDailyEntity>>>);
}

/// A class which mocks [WeatherRemoteSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRemoteSource extends _i1.Mock
    implements _i13.WeatherRemoteSource {
  MockWeatherRemoteSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i3.WeatherModel> getWeather() => (super.noSuchMethod(
        Invocation.method(
          #getWeather,
          [],
        ),
        returnValue: _i8.Future<_i3.WeatherModel>.value(_FakeWeatherModel_1(
          this,
          Invocation.method(
            #getWeather,
            [],
          ),
        )),
      ) as _i8.Future<_i3.WeatherModel>);

  @override
  _i8.Future<_i4.HourlyTemperatures> getForecastHourly() => (super.noSuchMethod(
        Invocation.method(
          #getForecastHourly,
          [],
        ),
        returnValue:
            _i8.Future<_i4.HourlyTemperatures>.value(_FakeHourlyTemperatures_2(
          this,
          Invocation.method(
            #getForecastHourly,
            [],
          ),
        )),
      ) as _i8.Future<_i4.HourlyTemperatures>);

  @override
  _i8.Future<_i5.DailyTemperatures> getForecastDaily() => (super.noSuchMethod(
        Invocation.method(
          #getForecastDaily,
          [],
        ),
        returnValue:
            _i8.Future<_i5.DailyTemperatures>.value(_FakeDailyTemperatures_3(
          this,
          Invocation.method(
            #getForecastDaily,
            [],
          ),
        )),
      ) as _i8.Future<_i5.DailyTemperatures>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i6.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i6.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<_i6.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i8.Future<_i6.Response>);

  @override
  _i8.Future<_i6.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<_i6.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i8.Future<_i6.Response>);

  @override
  _i8.Future<_i6.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i14.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i6.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i6.Response>);

  @override
  _i8.Future<_i6.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i14.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i6.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i6.Response>);

  @override
  _i8.Future<_i6.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i14.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i6.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i6.Response>);

  @override
  _i8.Future<_i6.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i14.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i6.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i6.Response>);

  @override
  _i8.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<String>.value(_i15.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<_i16.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<_i16.Uint8List>.value(_i16.Uint8List(0)),
      ) as _i8.Future<_i16.Uint8List>);

  @override
  _i8.Future<_i6.StreamedResponse> send(_i6.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i8.Future<_i6.StreamedResponse>.value(_FakeStreamedResponse_5(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i8.Future<_i6.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
